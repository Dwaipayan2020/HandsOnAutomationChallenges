{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_01>>\n\n    @pytest.fixture(scope=\"session\")\n    def setup(request):\n>       setExecutionFlags()\n\nuiautomationTests\\TestUIOne\\conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nuiautomationTests\\TestUIOne\\conftest.py:79: in setExecutionFlags\n    create_new_markers()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:128: in create_new_markers\n    __del_value_of_key('pytest', 'markers')\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:94: in __del_value_of_key\n    config = __get_config_parser_current_project()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:34: in __get_config_parser_current_project\n    config.read(get_project_utils_path(__get_current_project_name()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x00000190114D3700>, filenames = None, encoding = None\n\n    def read(self, filenames, encoding=None):\n        \"\"\"Read and parse a filename or an iterable of filenames.\n    \n        Files that cannot be opened are silently ignored; this is\n        designed so that you can specify an iterable of potential\n        configuration file locations (e.g. current directory, user's\n        home directory, systemwide directory), and all existing\n        configuration files in the iterable will be read.  A single\n        filename may also be given.\n    \n        Return list of successfully read files.\n        \"\"\"\n        if isinstance(filenames, (str, bytes, os.PathLike)):\n            filenames = [filenames]\n        read_ok = []\n>       for filename in filenames:\nE       TypeError: 'NoneType' object is not iterable\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\configparser.py:694: TypeError\n", "test_name": "test_01", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_01>>\n\n    @pytest.fixture(scope=\"session\")\n    def setup(request):\n>       setExecutionFlags()\n\nuiautomationTests\\TestUIOne\\conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nuiautomationTests\\TestUIOne\\conftest.py:79: in setExecutionFlags\n    create_new_markers()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:128: in create_new_markers\n    __del_value_of_key('pytest', 'markers')\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:94: in __del_value_of_key\n    config = __get_config_parser_current_project()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:34: in __get_config_parser_current_project\n    config.read(get_project_utils_path(__get_current_project_name()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x00000190114D3700>, filenames = None, encoding = None\n\n    def read(self, filenames, encoding=None):\n        \"\"\"Read and parse a filename or an iterable of filenames.\n    \n        Files that cannot be opened are silently ignored; this is\n        designed so that you can specify an iterable of potential\n        configuration file locations (e.g. current directory, user's\n        home directory, systemwide directory), and all existing\n        configuration files in the iterable will be read.  A single\n        filename may also be given.\n    \n        Return list of successfully read files.\n        \"\"\"\n        if isinstance(filenames, (str, bytes, os.PathLike)):\n            filenames = [filenames]\n        read_ok = []\n>       for filename in filenames:\nE       TypeError: 'NoneType' object is not iterable\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\configparser.py:694: TypeError\n", "test_name": "test_02", "rerun": "0"}}, "suite_name": "uiautomationTests/TestUIOne/tests/test_scenario_01.py"}, "1": {"suite_name": "uiautomationTests/TestUIOne/tests/test_scenario_02.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_01>>\n\n    @pytest.fixture(scope=\"session\")\n    def setup(request):\n>       setExecutionFlags()\n\nuiautomationTests\\TestUIOne\\conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nuiautomationTests\\TestUIOne\\conftest.py:79: in setExecutionFlags\n    create_new_markers()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:128: in create_new_markers\n    __del_value_of_key('pytest', 'markers')\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:94: in __del_value_of_key\n    config = __get_config_parser_current_project()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:34: in __get_config_parser_current_project\n    config.read(get_project_utils_path(__get_current_project_name()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x00000190114D3700>, filenames = None, encoding = None\n\n    def read(self, filenames, encoding=None):\n        \"\"\"Read and parse a filename or an iterable of filenames.\n    \n        Files that cannot be opened are silently ignored; this is\n        designed so that you can specify an iterable of potential\n        configuration file locations (e.g. current directory, user's\n        home directory, systemwide directory), and all existing\n        configuration files in the iterable will be read.  A single\n        filename may also be given.\n    \n        Return list of successfully read files.\n        \"\"\"\n        if isinstance(filenames, (str, bytes, os.PathLike)):\n            filenames = [filenames]\n        read_ok = []\n>       for filename in filenames:\nE       TypeError: 'NoneType' object is not iterable\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\configparser.py:694: TypeError\n", "test_name": "test_02", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}, "2": {"suite_name": "uiautomationTests/TestUIOne/tests/test_scenario_03.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_01>>\n\n    @pytest.fixture(scope=\"session\")\n    def setup(request):\n>       setExecutionFlags()\n\nuiautomationTests\\TestUIOne\\conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nuiautomationTests\\TestUIOne\\conftest.py:79: in setExecutionFlags\n    create_new_markers()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:128: in create_new_markers\n    __del_value_of_key('pytest', 'markers')\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:94: in __del_value_of_key\n    config = __get_config_parser_current_project()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:34: in __get_config_parser_current_project\n    config.read(get_project_utils_path(__get_current_project_name()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x00000190114D3700>, filenames = None, encoding = None\n\n    def read(self, filenames, encoding=None):\n        \"\"\"Read and parse a filename or an iterable of filenames.\n    \n        Files that cannot be opened are silently ignored; this is\n        designed so that you can specify an iterable of potential\n        configuration file locations (e.g. current directory, user's\n        home directory, systemwide directory), and all existing\n        configuration files in the iterable will be read.  A single\n        filename may also be given.\n    \n        Return list of successfully read files.\n        \"\"\"\n        if isinstance(filenames, (str, bytes, os.PathLike)):\n            filenames = [filenames]\n        read_ok = []\n>       for filename in filenames:\nE       TypeError: 'NoneType' object is not iterable\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\configparser.py:694: TypeError\n", "test_name": "test_03", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_01>>\n\n    @pytest.fixture(scope=\"session\")\n    def setup(request):\n>       setExecutionFlags()\n\nuiautomationTests\\TestUIOne\\conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nuiautomationTests\\TestUIOne\\conftest.py:79: in setExecutionFlags\n    create_new_markers()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:128: in create_new_markers\n    __del_value_of_key('pytest', 'markers')\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:94: in __del_value_of_key\n    config = __get_config_parser_current_project()\nuiautomationTests\\TestUIOne\\configureProject\\projectUtils.py:34: in __get_config_parser_current_project\n    config.read(get_project_utils_path(__get_current_project_name()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x00000190114D3700>, filenames = None, encoding = None\n\n    def read(self, filenames, encoding=None):\n        \"\"\"Read and parse a filename or an iterable of filenames.\n    \n        Files that cannot be opened are silently ignored; this is\n        designed so that you can specify an iterable of potential\n        configuration file locations (e.g. current directory, user's\n        home directory, systemwide directory), and all existing\n        configuration files in the iterable will be read.  A single\n        filename may also be given.\n    \n        Return list of successfully read files.\n        \"\"\"\n        if isinstance(filenames, (str, bytes, os.PathLike)):\n            filenames = [filenames]\n        read_ok = []\n>       for filename in filenames:\nE       TypeError: 'NoneType' object is not iterable\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\configparser.py:694: TypeError\n", "test_name": "test_04", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}}}}, "date": "September 05, 2022", "start_time": 1662365527.8854952, "total_suite": 3, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "5", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "5"}